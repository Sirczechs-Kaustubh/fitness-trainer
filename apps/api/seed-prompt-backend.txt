Backend Development Prompt for AI Fitness Trainer
You are an expert Node.js and Express.js backend developer responsible for building and enhancing the AI Fitness Trainer API. The project has a robust foundation, and your goal is to continue adding features according to the established project plan.

Technology Stack
Framework: Node.js, Express.js

Database: MongoDB with Mongoose

Authentication: JSON Web Tokens (JWT)

Real-time: Socket.IO

Validation: express-validator (or similar)

Package manager: npm

Full Project Plan
This is the official project roadmap. The backend work for Phases 1 through 6 is complete.

ðŸ”¹ Phase 1: Project Setup & Foundations (Completed)

ðŸ”¹ Phase 2: Authentication & User Management (Completed)

ðŸ”¹ Phase 3: Dashboard & User Stats (Completed)

ðŸ”¹ Phase 4: Exercise Library (Completed)

ðŸ”¹ Phase 5: Real-time Pose Detection & Feedback (Completed)

ðŸ”¹ Phase 6: Workout Sessions (Completed)

ðŸ”¹ Phase 7: Analytics & Progress Tracking (Current Task)

ðŸ”¹ Phase 8: Workout History & Data Management

ðŸ”¹ Phase 9: Demo & Tutorial Section

Current Project Structure
.

â”œâ”€â”€ app.js

â”œâ”€â”€ index.js

â”œâ”€â”€ package-lock.json

â”œâ”€â”€ package.json

â”œâ”€â”€ seed-prompt-backend.txt

â”œâ”€â”€ seed.js

â”œâ”€â”€ src

â”‚Â Â  â”œâ”€â”€ api

â”‚Â Â  â”‚Â Â  â”œâ”€â”€ controllers

â”‚Â Â  â”‚Â Â  â”‚Â Â  â”œâ”€â”€ auth.controller.js

â”‚Â Â  â”‚Â Â  â”‚Â Â  â”œâ”€â”€ exercise.controller.js

â”‚Â Â  â”‚Â Â  â”‚Â Â  â”œâ”€â”€ user.controller.js

â”‚Â Â  â”‚Â Â  â”‚Â Â  â””â”€â”€ workout.controller.js

â”‚Â Â  â”‚Â Â  â”œâ”€â”€ middlewares

â”‚Â Â  â”‚Â Â  â”‚Â Â  â”œâ”€â”€ admin.middleware.js

â”‚Â Â  â”‚Â Â  â”‚Â Â  â”œâ”€â”€ auth.middleware.js

â”‚Â Â  â”‚Â Â  â”‚Â Â  â”œâ”€â”€ errorHandler.js

â”‚Â Â  â”‚Â Â  â”‚Â Â  â””â”€â”€ validators.js

â”‚Â Â  â”‚Â Â  â””â”€â”€ routes

â”‚Â Â  â”‚Â Â  Â  Â  â”œâ”€â”€ auth.routes.js

â”‚Â Â  â”‚Â Â  Â  Â  â”œâ”€â”€ exercise.routes.js

â”‚Â Â  â”‚Â Â  Â  Â  â”œâ”€â”€ user.routes.js

â”‚Â Â  â”‚Â Â  Â  Â  â””â”€â”€ workout.routes.js

â”‚Â Â  â”œâ”€â”€ config

â”‚Â Â  â”‚Â Â  â””â”€â”€ database.js

â”‚Â Â  â”œâ”€â”€ models

â”‚Â Â  â”‚Â Â  â”œâ”€â”€ Exercise.model.js

â”‚Â Â  â”‚Â Â  â”œâ”€â”€ User.model.js

â”‚Â Â  â”‚Â Â  â””â”€â”€ Workout.model.js

â”‚Â Â  â”œâ”€â”€ services

â”‚Â Â  â”œâ”€â”€ utils

â”‚Â Â  â”‚Â Â  â”œâ”€â”€ asyncHandler.js

â”‚Â Â  â”‚Â Â  â””â”€â”€ responseHandler.js

â”‚Â Â  â””â”€â”€ websocket

â”‚Â Â  Â  Â  â”œâ”€â”€ index.js

â”‚Â Â  Â  Â  â””â”€â”€ rules

â”‚Â Â  Â  Â  Â  Â  â”œâ”€â”€ bicepCurl.js

â”‚Â Â  Â  Â  Â  Â  â”œâ”€â”€ jumpingJack.js

â”‚Â Â  Â  Â  Â  Â  â”œâ”€â”€ lunge.js

â”‚Â Â  Â  Â  Â  Â  â”œâ”€â”€ mountainClimber.js

â”‚Â Â  Â  Â  Â  Â  â”œâ”€â”€ pushup.js

â”‚Â Â  Â  Â  Â  Â  â”œâ”€â”€ shoulderPress.js

â”‚Â Â  Â  Â  Â  Â  â”œâ”€â”€ squat.js

â”‚Â Â  Â  Â  Â  Â  â”œâ”€â”€ tricepDip.js

â”‚Â Â  Â  Â  Â  Â  â””â”€â”€ utils.js

â””â”€â”€ test_api.sh

Status: Completed Work
The backend functionality for Phases 1 through 6 is fully implemented, stable, and feature-rich. This includes user authentication, real-time pose analysis, a user stats dashboard, a full exercise library with admin controls, and structured workout session management.

Next Task: Phase 7 - Analytics & Progress Tracking (Backend)
Goal: Visualize progress in detail by creating a dedicated analytics API.

Your Tasks:

Create a Progress & Analytics Endpoint:

Create a new controller file: apps/api/src/api/controllers/progress.controller.js.

Create a new routes file: apps/api/src/api/routes/progress.routes.js.

Implement a new route: GET /api/v1/progress.

This endpoint must be protected by the authMiddleware.

It should accept a query parameter to define the time window for the analysis, for example: ?period=weekly or ?period=monthly.

Implement Analytics Logic:

Inside the progress.controller.js, create a function to handle the logic for the /progress route.

This function will retrieve all of the user's completed workouts from the database.

Based on the period query parameter, filter these workouts to include only those from the relevant time frame (e.g., the last 7 days for "weekly", the last 30 days for "monthly").

Aggregate the filtered data to calculate the key progress metrics defined in the project plan:

Calories Burned Trend: Sum of caloriesBurned grouped by day or week.

Reps Done (Volume Trend): Sum of reps * sets for all exercises, grouped by day or week.

Best Score: Find the single exercise with the highest formScore within the period.

Accuracy Trend (Form Score Trend): Calculate the average formScore across all exercises, grouped by day or week, to show improvement over time.

Integrate New Route:

In your main app.js file, import and mount the new progress routes under the /api/v1/progress path.

Deliverable: A secure and efficient backend endpoint (/api/v1/progress) that performs time-based aggregations on workout data. The response should be structured to make it easy for the frontend to build interactive charts and visualizations for the analytics dashboard.